generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Degree {
  id    String @id @default(cuid())
  title String
  terms Term[]
}

model Term {
  id             String        @id @default(cuid())
  title          String
  startDate      DateTime
  endDate        DateTime
  degreeId       String
  academicYearId String?
  type           TermType      @default(SEMESTER)
  modules        Module[]
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  degree         Degree        @relation(fields: [degreeId], references: [id])
}

model Module {
  id            String                @id @default(cuid())
  code          String
  title         String
  creditHours   Int
  termId        String?
  ownerId       String? // optional owner for linkage to user
  createdAt     DateTime              @default(now())
  targetMark    Float?
  department    String?
  faculty       String?
  personnel     Json?
  prerequisites String?
  status        ModuleStatus          @default(ACTIVE)
  endDate       DateTime?
  startDate     DateTime?
  electiveGroup String?
  isCore        Boolean               @default(true)
  span          ModuleSpan            @default(SEMESTER)
  components    AssessmentComponent[]
  assignments   Assignment[]
  term          Term?                 @relation(fields: [termId], references: [id])
  tasks         TacticalTask[]
  studyLogs     StudyLog[]

  @@index([startDate, endDate])
}

model AssessmentComponent {
  id          String       @id @default(cuid())
  name        String
  moduleId    String
  module      Module       @relation(fields: [moduleId], references: [id])
  assignments Assignment[]
}

model Assignment {
  id          String               @id @default(cuid())
  title       String
  dueDate     DateTime?
  score       Float?
  moduleId    String
  componentId String?
  createdAt   DateTime             @default(now())
  weight      Float
  description String?
  status      AssignmentStatus     @default(PENDING)
  type        AssignmentType       @default(ASSIGNMENT)
  component   AssessmentComponent? @relation(fields: [componentId], references: [id])
  module      Module               @relation(fields: [moduleId], references: [id])

  @@index([dueDate])
}

model TacticalTask {
  id        String             @id @default(cuid())
  title     String
  status    TacticalTaskStatus @default(PENDING)
  type      TacticalTaskType
  dueDate   DateTime
  moduleId  String
  source    String?
  links     Json?
  createdAt DateTime           @default(now())
  module    Module             @relation(fields: [moduleId], references: [id])

  @@index([dueDate])
}

model AcademicYear {
  id        String   @id @default(cuid())
  title     String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  terms     Term[]
}

// Basic user model (minimal) if not already generated elsewhere
model User {
  id        String      @id @default(cuid())
  email     String?     @unique
  name      String?
  degreeId  String?     // simplistic link
  studyLogs StudyLog[]
}

model StudyLog {
  id         String   @id @default(cuid())
  userId     String
  moduleId   String?
  date       DateTime @default(now())
  durationMin Int
  user       User     @relation(fields: [userId], references: [id])
  module     Module?  @relation(fields: [moduleId], references: [id])
  @@index([date])
}

enum AssignmentStatus {
  PENDING
  GRADED
  DUE
  COMPLETE
  MISSED
}

enum AssignmentType {
  QUIZ
  SEMESTER_TEST
  ASSIGNMENT
  HOMEWORK
  PRACTICAL
  EXAM
  TUTORIAL
}

enum ModuleStatus {
  ACTIVE
  COMPLETED
  DROPPED
  INACTIVE
}

enum TermType {
  SEMESTER
  TRIMESTER
  QUARTER
}

enum TacticalTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum TacticalTaskType {
  READ
  STUDY
  PRACTICE
  REVIEW
  ADMIN
}

enum ModuleSpan {
  SEMESTER
  YEAR
  QUARTER
}
